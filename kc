#!/bin/bash

debug_yn=n
if [[ "$1" == "-d" ]]; then
  debug_yn=y
  shift
fi
if [[ "${CLI_DEBUG^^}" == "TRUE" ]]; then
  debug_yn=y
fi

l80="--------------------------------------------------------------------------------"

c_bla="\\\e[30m"
c_blu="\\\e[34m"
c_cya="\\\e[36m"
c_def="\\\e[39m"
c_gra="\\\e[90m"
c_gre="\\\e[32m"
c_mag="\\\e[35m"
c_red="\\\e[31m"
c_whi="\\\e[97m"
c_yel="\\\e[33m"

c_lblu="\\\e[94m"
c_lcya="\\\e[96m"
c_lgra="\\\e[37m"
c_lgre="\\\e[92m"
c_lmag="\\\e[95m"
c_lred="\\\e[91m"
c_lyel="\\\e[93m"


function check_params() {
  # param 1 - actual number of parameters
  # param 2 - required number of parameters
  # param 3 - incorrect parameters message

  if [[ "$1" < "$2" ]]; then
    echo "$3"
    exit
  fi
}

function print_command() {
  # param 1 - command

  if [[ $debug_yn == y ]]; then
    echo "COMMAND: $*" | sed s/./-/g
    echo "COMMAND: $*"
    echo "COMMAND: $*" | sed s/./-/g
  fi
}

section="ALL"
if [[ "$1 $2" == "get all" || "$1" == "kga" ]]; then
   if [[ "$1" == "kga" ]]; then shift; else shift 2; fi
   usage="[95mget all [96m(kga)[97m [37m[<namespace>][97m[0m "
   check_params $# 0 "Usage: $usage"
   print_command 'if [[ "$1" == "" ]]; then kubectl get all -A; else kubectl get all -n $1; fi'
   if [[ "$1" == "" ]]; then kubectl get all -A; else kubectl get all -n $1; fi
   exit
fi
if [[ "$1" == "get" || "$1" == "kg" ]]; then
   if [[ "$1" == "kg" ]]; then shift; else shift 1; fi
   usage="[95mget [96m(kg)[97m <item>[0m "
   check_params $# 1 "Usage: $usage"
   print_command 'kubectl get $1'
   kubectl get $1
   exit
fi
section="LOGS"
if [[ "$1" == "logs" || "$1" == "kl" ]]; then
   if [[ "$1" == "kl" ]]; then shift; else shift 1; fi
   usage="[95mlogs [96m(kl)[97m <pod_name> [37m[<namespace>][97m[0m "
   check_params $# 1 "Usage: $usage"
   print_command 'if [[ "$2" == "" ]]; then kubectl logs $1; else kubectl logs $1 -n $2; fi'
   if [[ "$2" == "" ]]; then kubectl logs $1; else kubectl logs $1 -n $2; fi
   exit
fi
section="NODES"
if [[ "$1 $2" == "get node" || "$1" == "kgn" ]]; then
   if [[ "$1" == "kgn" ]]; then shift; else shift 2; fi
   usage="[95mget node [96m(kgn)[97m[0m "
   check_params $# 0 "Usage: $usage"
   print_command 'kubectl get nodes'
   kubectl get nodes
   exit
fi
section="PODS"
if [[ "$1 $2" == "get pods" || "$1" == "kgp" ]]; then
   if [[ "$1" == "kgp" ]]; then shift; else shift 2; fi
   usage="[95mget pods [96m(kgp)[97m [37m[<namespace>][97m[0m "
   check_params $# 0 "Usage: $usage"
   print_command 'if [[ "$1" == "" ]]; then kubectl get pods -A; else kubectl get pods -n $1; fi'
   if [[ "$1" == "" ]]; then kubectl get pods -A; else kubectl get pods -n $1; fi
   exit
fi
if [[ "$1 $2" == "delete pod" || "$1" == "kdp" ]]; then
   if [[ "$1" == "kdp" ]]; then shift; else shift 2; fi
   usage="[95mdelete pod [96m(kdp)[97m <pod_name> [37m[<namespace>][97m[0m "
   check_params $# 1 "Usage: $usage"
   print_command 'if [[ "$2" != "" ]]; then kubectl delete pod $1 -n $2; else kubectl delete pod $1; fi'
   if [[ "$2" != "" ]]; then kubectl delete pod $1 -n $2; else kubectl delete pod $1; fi
   exit
fi
section="PERSISTENT VOLUMES"
if [[ "$1 $2 $3" == "get persistent volumes" || "$1" == "kgpv" ]]; then
   if [[ "$1" == "kgpv" ]]; then shift; else shift 3; fi
   usage="[95mget persistent volumes [96m(kgpv)[97m [37m[<namespace>][97m[0m "
   check_params $# 0 "Usage: $usage"
   print_command 'if [[ "$1" == "" ]]; then kubectl get pv -A; else kubectl get pv -n $1; fi'
   if [[ "$1" == "" ]]; then kubectl get pv -A; else kubectl get pv -n $1; fi
   exit
fi
section="PERSISTENT VOLUME CLAIMS"
if [[ "$1 $2 $3 $4" == "get persistent volume claims" || "$1" == "kgpvc" ]]; then
   if [[ "$1" == "kgpvc" ]]; then shift; else shift 4; fi
   usage="[95mget persistent volume claims [96m(kgpvc)[97m [37m[<namespace>][97m[0m "
   check_params $# 0 "Usage: $usage"
   print_command 'if [[ "$1" == "" ]]; then kubectl get pvc -A; else kubectl get pvc -n $1; fi'
   if [[ "$1" == "" ]]; then kubectl get pvc -A; else kubectl get pvc -n $1; fi
   exit
fi
section="SECRETS"
if [[ "$1 $2" == "get secrets" || "$1" == "kgse" ]]; then
   if [[ "$1" == "kgse" ]]; then shift; else shift 2; fi
   usage="[95mget secrets [96m(kgse)[97m [37m[<namespace>][97m[0m "
   check_params $# 0 "Usage: $usage"
   print_command 'if [[ "$1" == "" ]]; then kubectl get secrets -A; else kubectl get secrets -n $1; fi'
   if [[ "$1" == "" ]]; then kubectl get secrets -A; else kubectl get secrets -n $1; fi
   exit
fi
if [[ "$1 $2" == "delete service" || "$1" == "kdse" ]]; then
   if [[ "$1" == "kdse" ]]; then shift; else shift 2; fi
   usage="[95mdelete service [96m(kdse)[97m <secret_name> [37m[<namespace>][97m[0m "
   check_params $# 1 "Usage: $usage"
   print_command 'if [[ "$2" != "" ]]; then kubectl delete secret $1 -n $2; else kubectl delete secret $1; fi'
   if [[ "$2" != "" ]]; then kubectl delete secret $1 -n $2; else kubectl delete secret $1; fi
   exit
fi
section="SERVICES"
if [[ "$1 $2" == "get services" || "$1" == "kgs" ]]; then
   if [[ "$1" == "kgs" ]]; then shift; else shift 2; fi
   usage="[95mget services [96m(kgs)[97m [37m[<namespace>][97m[0m "
   check_params $# 0 "Usage: $usage"
   print_command 'if [[ "$1" == "" ]]; then kubectl get svc -A; else kubectl get svc -n $1; fi'
   if [[ "$1" == "" ]]; then kubectl get svc -A; else kubectl get svc -n $1; fi
   exit
fi
if [[ "$1 $2" == "delete service" || "$1" == "kds" ]]; then
   if [[ "$1" == "kds" ]]; then shift; else shift 2; fi
   usage="[95mdelete service [96m(kds)[97m <service_name> [37m[<namespace>][97m[0m "
   check_params $# 1 "Usage: $usage"
   print_command 'if [[ "$2" != "" ]]; then kubectl delete svc $1 -n $2; else kubectl delete svc $1; fi'
   if [[ "$2" != "" ]]; then kubectl delete svc $1 -n $2; else kubectl delete svc $1; fi
   exit
fi
section="STATEFULSETS"
if [[ "$1 $2" == "get statefulset" || "$1" == "kgss" ]]; then
   if [[ "$1" == "kgss" ]]; then shift; else shift 2; fi
   usage="[95mget statefulset [96m(kgss)[97m [37m[<namespace>][97m[0m "
   check_params $# 0 "Usage: $usage"
   print_command 'if [[ "$1" == "" ]]; then kubectl get statefulset -A; else kubectl get statefulset -n $1; fi'
   if [[ "$1" == "" ]]; then kubectl get statefulset -A; else kubectl get statefulset -n $1; fi
   exit
fi
if [[ "$1 $2" == "delete statefulset" || "$1" == "kdss" ]]; then
   if [[ "$1" == "kdss" ]]; then shift; else shift 2; fi
   usage="[95mdelete statefulset [96m(kdss)[97m <statefulset_name> [37m[<namespace>][97m[0m "
   check_params $# 1 "Usage: $usage"
   print_command 'if [[ "$2" != "" ]]; then kubectl delete statefulset $1 -n $2; else kubectl delete statefulset $1; fi'
   if [[ "$2" != "" ]]; then kubectl delete statefulset $1 -n $2; else kubectl delete statefulset $1; fi
   exit
fi
section="HELP"
if [[ "$1" == "help" || "$1" == "khe" ]]; then
   if [[ "$1" == "khe" ]]; then shift; else shift 1; fi
   usage="[95mhelp [96m(khe)[97m[0m "
   check_params $# 0 "Usage: $usage"
   egrep "usage=|section=" "$0" | grep -v "grep" | sed "s/.*usage=/ /; s/.*section=/\x1b[92m/; s/\"//g"
   exit
fi

if [[ "$1" == "" ]]; then
  echo "No option passed"
else
  echo "$*: invalid option"
fi
echo "Try \"kc help\" for more information."

