#!/bin/bash

debug_yn=n
if [[ "$1" == "-d" ]]; then
  debug_yn=y
  shift
fi
if [[ "${CLI_DEBUG^^}" == "TRUE" ]]; then
  debug_yn=y
fi

l80="--------------------------------------------------------------------------------"


function check_params() {
  # param 1 - actual number of parameters
  # param 2 - required number of parameters
  # param 3 - incorrect parameters message

  if [[ "$1" < "$2" ]]; then
    echo "$3"
    exit
  fi
}

function print_command() {
  # param 1 - command

  if [[ $debug_yn == y ]]; then
    echo "COMMAND: $*" | sed 's/./-/g'
    echo "COMMAND: $*" | sed 's/"/\"/g'
    echo "COMMAND: $*" | sed 's/./-/g'
  fi
}

section="CONTAINERS"
if [[ "$1 $2" == "delete container" || "$1" == "drm" ]]; then
   if [[ "$1" == "drm" ]]; then shift; else shift 2; fi
   usage="[95mdelete container [96m(drm)[97m <container_name>[0m "
   check_params $# 1 "Usage: $usage"
   print_command " read -p \"Are you sure [yN]? \" yn; if [[ ${yn^} == Y ]]; then docker rm $1; fi "
   read -p "Are you sure [yN]? " yn; if [[ ${yn^} == Y ]]; then docker rm $1; fi
   exit
fi
if [[ "$1 $2 $3" == "list containers -d" || "$1" == "dps" ]]; then
   if [[ "$1" == "dps" ]]; then shift; else shift 3; fi
   usage="[95mlist containers [96m(dps)[97m [37m[-d][97m[0m [92m # -d: show details[0m"
   check_params $# 0 "Usage: $usage"
   print_command " if [[ $1 == -d ]]; then docker ps --all; else tmp=\"$(docker ps --all --format 'table {{.ID}}\t{{.Names}}\t{{.Status}}\t{{.Size}}')\"; echo \"$tmp\" | head -n1; echo \"$tmp\" | tail -n+2 | grep 'Up [0-9]* min' | sort -k2,2; echo \"$tmp\" | tail -n+2 | grep -v 'Up [0-9]* min' | sort -k 2,2; fi  "
   if [[ $1 == -d ]]; then docker ps --all; else tmp="$(docker ps --all --format 'table {{.ID}}\t{{.Names}}\t{{.Status}}\t{{.Size}}')"; echo "$tmp" | head -n1; echo "$tmp" | tail -n+2 | grep 'Up [0-9]* min' | sort -k2,2; echo "$tmp" | tail -n+2 | grep -v 'Up [0-9]* min' | sort -k 2,2; fi 
   exit
fi
if [[ "$1 $2" == "logs -f" || "$1" == "dlo" ]]; then
   if [[ "$1" == "dlo" ]]; then shift; else shift 2; fi
   usage="[95mlogs [96m(dlo)[97m [37m[-f][97m <container-name>[0m [92m # -f: follow log[0m"
   check_params $# 1 "Usage: $usage"
   print_command " if [[ $1 == -f ]]; then docker logs -f $2; else docker logs $1; fi  "
   if [[ $1 == -f ]]; then docker logs -f $2; else docker logs $1; fi 
   exit
fi
if [[ "$1 $2" == "pull container" || "$1" == "dpu" ]]; then
   if [[ "$1" == "dpu" ]]; then shift; else shift 2; fi
   usage="[95mpull container [96m(dpu)[97m <container_name>[0m "
   check_params $# 1 "Usage: $usage"
   print_command " docker pull $1 "
   docker pull $1
   exit
fi
if [[ "$1 $2" == "rename container" || "$1" == "dmv" ]]; then
   if [[ "$1" == "dmv" ]]; then shift; else shift 2; fi
   usage="[95mrename container [96m(dmv)[97m <current_name> <new_name>[0m "
   check_params $# 2 "Usage: $usage"
   print_command " docker rename $1 $2 "
   docker rename $1 $2
   exit
fi
if [[ "$1 $2" == "restart container" || "$1" == "dre" ]]; then
   if [[ "$1" == "dre" ]]; then shift; else shift 2; fi
   usage="[95mrestart container [96m(dre)[97m <container_name>[0m "
   check_params $# 1 "Usage: $usage"
   print_command " docker restart $1 !! docker ps --all --format '{{.Names}}' "
   docker restart $1 !! docker ps --all --format '{{.Names}}'
   exit
fi
if [[ "$1 $2 $3" == "run container -p" || "$1" == "dru" ]]; then
   if [[ "$1" == "dru" ]]; then shift; else shift 3; fi
   usage="[95mrun container [96m(dru)[97m <source-container-name> <deployed-container-name> [37m[-p <host-port>:<container-port>][97m[0m "
   check_params $# 2 "Usage: $usage"
   print_command " if [[ $3 == -p ]]; then docker run -d $3 $4 $5 $6 --name $2 $1; else docker -d --name $2 $1; fi "
   if [[ $3 == -p ]]; then docker run -d $3 $4 $5 $6 --name $2 $1; else docker -d --name $2 $1; fi
   exit
fi
if [[ "$1" == "shell" || "$1" == "dsh" ]]; then
   if [[ "$1" == "dsh" ]]; then shift; else shift 1; fi
   usage="[95mshell [96m(dsh)[97m [37m[<-s>][97m [37m[<-r>][97m <container_name>[0m [92m # bash shell. -s: sh, -r: user root[0m"
   check_params $# 1 "Usage: $usage"
   print_command " tmp_shell=bash; tmp_user=\"\"; while [[ \"$1\" != \"\" ]]; do case $1 in -s) tmp_shell=sh;; -r) tmp_user=\"--user root\";; *) break;; esac; echo $1; shift; done; docker exec -it $tmp_user $1 $tmp_shell !! docker ps --all --format '{{.Names}}'  "
   tmp_shell=bash; tmp_user=""; while [[ "$1" != "" ]]; do case $1 in -s) tmp_shell=sh;; -r) tmp_user="--user root";; *) break;; esac; echo $1; shift; done; docker exec -it $tmp_user $1 $tmp_shell !! docker ps --all --format '{{.Names}}' 
   exit
fi
if [[ "$1 $2 $3" == "start container -a" || "$1" == "dst" ]]; then
   if [[ "$1" == "dst" ]]; then shift; else shift 3; fi
   usage="[95mstart container [96m(dst)[97m [37m[-a][97m <container_name>[0m "
   check_params $# 1 "Usage: $usage"
   print_command " docker start $1 "
   docker start $1
   exit
fi
if [[ "$1" == "stats" || "$1" == "ds" ]]; then
   if [[ "$1" == "ds" ]]; then shift; else shift 1; fi
   usage="[95mstats [96m(ds)[97m[0m "
   check_params $# 0 "Usage: $usage"
   print_command " docker stats "
   docker stats
   exit
fi
if [[ "$1 $2 $3" == "stop container -a" || "$1" == "dso" ]]; then
   if [[ "$1" == "dso" ]]; then shift; else shift 3; fi
   usage="[95mstop container [96m(dso)[97m [37m[-a][97m <container_name>[0m [92m # -a: Stop all containers[0m"
   check_params $# 1 "Usage: $usage"
   print_command " if [[ $1 == -a ]]; then conts=\"$(docker ps -q)\"; if [[ \"$conts\" != \"\" ]]; then docker stop $conts; fi; else docker stop $1; fi  "
   if [[ $1 == -a ]]; then conts="$(docker ps -q)"; if [[ "$conts" != "" ]]; then docker stop $conts; fi; else docker stop $1; fi 
   exit
fi
section="COMPOSE"
if [[ "$1 $2" == "compose down" || "$1" == "dcdo" ]]; then
   if [[ "$1" == "dcdo" ]]; then shift; else shift 2; fi
   usage="[95mcompose down [96m(dcdo)[97m [37m[<service>][97m[0m [92m # Stop and remove containers, networks[0m"
   check_params $# 0 "Usage: $usage"
   print_command " if [[ \"$1\" == \"\" ]]; then docker compose down; else docker compose -f $1 down; fi;  "
   if [[ "$1" == "" ]]; then docker compose down; else docker compose -f $1 down; fi; 
   exit
fi
if [[ "$1 $2" == "compose restart" || "$1" == "dcre" ]]; then
   if [[ "$1" == "dcre" ]]; then shift; else shift 2; fi
   usage="[95mcompose restart [96m(dcre)[97m [37m[<service>][97m[0m [92m # Restart all containers[0m"
   check_params $# 0 "Usage: $usage"
   print_command " if [[ \"$1\" == \"\" ]]; then docker compose restart; else docker compose -f $1 restart; fi;  "
   if [[ "$1" == "" ]]; then docker compose restart; else docker compose -f $1 restart; fi; 
   exit
fi
if [[ "$1 $2" == "compose up" || "$1" == "dcup" ]]; then
   if [[ "$1" == "dcup" ]]; then shift; else shift 2; fi
   usage="[95mcompose up [96m(dcup)[97m [37m[<service>][97m[0m [92m # Deploy and run containers, networks[0m"
   check_params $# 0 "Usage: $usage"
   print_command " if [[ \"$1\" == \"\" ]]; then docker compose up -d; else docker compose -f $1 up -d; fi;  "
   if [[ "$1" == "" ]]; then docker compose up -d; else docker compose -f $1 up -d; fi; 
   exit
fi
section="NETWORKS"
if [[ "$1 $2" == "list networks" || "$1" == "dln" ]]; then
   if [[ "$1" == "dln" ]]; then shift; else shift 2; fi
   usage="[95mlist networks [96m(dln)[97m[0m "
   check_params $# 0 "Usage: $usage"
   print_command " docker network ls "
   docker network ls
   exit
fi
if [[ "$1 $2" == "prune networks" || "$1" == "dpn" ]]; then
   if [[ "$1" == "dpn" ]]; then shift; else shift 2; fi
   usage="[95mprune networks [96m(dpn)[97m[0m [92m # Remove all unusaed custom networks[0m"
   check_params $# 0 "Usage: $usage"
   print_command " docker network prune  "
   docker network prune 
   exit
fi
if [[ "$1 $2" == "remove network" || "$1" == "drn" ]]; then
   if [[ "$1" == "drn" ]]; then shift; else shift 2; fi
   usage="[95mremove network [96m(drn)[97m <network-name>[0m "
   check_params $# 1 "Usage: $usage"
   print_command " docker network rm $1 "
   docker network rm $1
   exit
fi
section="HELP"
if [[ "$1" == "help" || "$1" == "dhe" ]]; then
   if [[ "$1" == "dhe" ]]; then shift; else shift 1; fi
   usage="[95mhelp [96m(dhe)[97m[0m "
   check_params $# 0 "Usage: $usage"
   egrep "usage=|section=" "$0" | grep -v "grep" | sed "s/.*usage=/ /; s/.*section=/\x1b[92m/; s/\"//g"
   exit
fi

if [[ "$1" == "" ]]; then
  echo "No option passed"
else
  echo "$*: invalid option"
fi
echo "Try \"dc help\" for more information."

