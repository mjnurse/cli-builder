#!/bin/bash
help_text="
NAME
   query-es - One line description.

USAGE
   query-es [options] <parameters>

OPTIONS
   -x
      Description...

   -h|--help
      Show help text.

DESCRIPTION
   Description description description description.

AUTHOR
  mjnurse.dev - 2020
"
help_line="tbc"
desc_line="tbc"

tmpfile="/tmp/es.$RANDOM.$RANDOM.tmp"
filter_regex=""
debug_yn=n

if [[ $# == 0 ]]; then
   echo "Usage: query-es options"
   echo
   echo "   -d debug y/n (default:n)"
   echo "   -h host (default:\$QES_HOST=$QES_HOST)"
   echo "   -p port (default:\$QES_PORT=$QES_PORT)"
   echo "   -o opn (mandatory)"
   echo "   -a api (mandatory)"
   echo "   -r header rows (default:0)"
   echo "   -j json"
   echo "   -f filter_regex"
fi

# Default Values
debug_yn=n
host="$QES_HOST"
port="$QES_PORT"
header_rows=0

while [[ $# > 0 ]]; do
   case $1 in
   -d) debug_yn=y ;;
   -h) shift; host="$1" ;;
   -p) shift; port="$1" ;;
   -o) shift; opn="$1" ;;
   -a) shift; api="$1" ;;
   -r) shift; header_rows="$1" ;;
   -j) shift; json="$1" ;;
   -f) shift; filter_regex="$1" ;;
   *)  echo "ERROR: OTHER VALUE: $1"; exit ;;
   esac
   shift
done

if [[ "$host" == "" || "$port" == "" ]]; then
   echo missing host or port
fi

if [[ $debug_yn == y ]]; then
   echo ==================================================
   echo PARAMETERS
   echo ==================================================
   echo host="$host"
   echo port="$port"
   echo opn="$opn"
   echo api="$api"
   echo header_rows="$header_rows"
   echo json="$json" | tr -d "\n" | sed "s/  */ /g"
   echo
   echo filter_regex="$filter_regex"
fi

url="$host:$port/$api"

# Replace any // with a / (this allows us to miss index names from some commands to run on all indexes)
url="http://${url//\/\///}"
cmd="Command: $opn $url"
cmddiv=$(echo $cmd | sed "s/./-/g")

if [[ "$opn" == "DELETE" ]]; then
   read -p "Are you sure you want to delete index: "'"'$api'"'" [yN]: " yn
   if [[ "$yn" != "y" && "$yn" != "Y" ]]; then
      exit
   fi
fi

if [[ "$json" != "" ]]; then
   if [[ $debug_yn == y ]]; then
      echo ==================================================
      echo COMMAND
      echo ==================================================
      echo curl -X $opn "$url"  -H 'Content-Type: application/json' -d "$json" | tr -d "\n" | sed "s/  */ /g"
      echo
      echo ==================================================
      echo RESULTS
      echo ==================================================
   fi
   curl -X $opn "$url"  -H 'Content-Type: application/json' -d "$json" 2>/dev/null | sed "$filter_regex" > $tmpfile 2>/dev/null
   #curl -X $opn "$url"  -H 'Content-Type: application/json' -d "$json" 
else
   if [[ $debug_yn == y ]]; then
      echo ==================================================
      echo COMMAND
      echo ==================================================
      echo curl -X $opn "$url" | tr -d "\n" | sed "s/  */ /g"
      echo
      echo ==================================================
      echo RESULTS
      echo ==================================================
   fi
   curl -X $opn "$url" 2>/dev/null | sed "$filter_regex" > $tmpfile 2>/dev/null
fi

reshead="$(head -1 $tmpfile)"
if [[ "${reshead:2:5}" == "error" ]]; then
   echo
   echo ERROR:
   cat $tmpfile
   exit
fi

#sed -i "s/->/\n   ->/g" $tmpfile
cat $tmpfile

num_lines=$(cat $tmpfile | wc -l)
let num_lines=num_lines-header_rows

echo
echo "($num_lines lines)"


